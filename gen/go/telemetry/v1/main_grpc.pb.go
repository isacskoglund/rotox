// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: telemetry/v1/main.proto

package telemetryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelemetryService_TransferSubscribe_FullMethodName   = "/telemetry.v1.TelemetryService/TransferSubscribe"
	TelemetryService_ConnectionSubscribe_FullMethodName = "/telemetry.v1.TelemetryService/ConnectionSubscribe"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	TransferSubscribe(ctx context.Context, in *TransferSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferSubscribeResponse], error)
	ConnectionSubscribe(ctx context.Context, in *ConnectionSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionSubscribeResponse], error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) TransferSubscribe(ctx context.Context, in *TransferSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferSubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], TelemetryService_TransferSubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransferSubscribeRequest, TransferSubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_TransferSubscribeClient = grpc.ServerStreamingClient[TransferSubscribeResponse]

func (c *telemetryServiceClient) ConnectionSubscribe(ctx context.Context, in *ConnectionSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectionSubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[1], TelemetryService_ConnectionSubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectionSubscribeRequest, ConnectionSubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_ConnectionSubscribeClient = grpc.ServerStreamingClient[ConnectionSubscribeResponse]

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility.
type TelemetryServiceServer interface {
	TransferSubscribe(*TransferSubscribeRequest, grpc.ServerStreamingServer[TransferSubscribeResponse]) error
	ConnectionSubscribe(*ConnectionSubscribeRequest, grpc.ServerStreamingServer[ConnectionSubscribeResponse]) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelemetryServiceServer struct{}

func (UnimplementedTelemetryServiceServer) TransferSubscribe(*TransferSubscribeRequest, grpc.ServerStreamingServer[TransferSubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TransferSubscribe not implemented")
}
func (UnimplementedTelemetryServiceServer) ConnectionSubscribe(*ConnectionSubscribeRequest, grpc.ServerStreamingServer[ConnectionSubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectionSubscribe not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}
func (UnimplementedTelemetryServiceServer) testEmbeddedByValue()                          {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelemetryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_TransferSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransferSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).TransferSubscribe(m, &grpc.GenericServerStream[TransferSubscribeRequest, TransferSubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_TransferSubscribeServer = grpc.ServerStreamingServer[TransferSubscribeResponse]

func _TelemetryService_ConnectionSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).ConnectionSubscribe(m, &grpc.GenericServerStream[ConnectionSubscribeRequest, ConnectionSubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_ConnectionSubscribeServer = grpc.ServerStreamingServer[ConnectionSubscribeResponse]

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.v1.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferSubscribe",
			Handler:       _TelemetryService_TransferSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectionSubscribe",
			Handler:       _TelemetryService_ConnectionSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry/v1/main.proto",
}
